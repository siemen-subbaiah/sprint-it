// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Project {
  id              Int               @id @default(sequence())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdUserId   String
  createdUserName String
  name            String
  prefix          String
  uniqueId        String            @unique @default(uuid())
  users           UsersOnProjects[]
  sprints         Sprint[]
}

model User {
  id            Int               @id @default(sequence())
  createdAt     DateTime          @default(now())
  invitedUserId String?
  isConfirmed   Boolean
  username      String?
  email         String
  photo         String?
  role          String
  bio           String?
  clerkUserId   String?
  projects      UsersOnProjects[]
}

model Sprint {
  id                Int      @id @default(sequence())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdUserId     String
  createdUserName   String
  sprintName        String
  sprintDescription String
  startDate         DateTime
  endDate           DateTime
  isInProgress      Boolean
  isEnded           Boolean  @default(false)
  project           Project  @relation(fields: [projectId], references: [uniqueId])
  projectId         String
  tasks             Task[]
}

model Task {
  id              Int          @id @default(sequence())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdUserId   String
  createdUserName String
  itemName        String
  itemDescription String
  assignedUserId  String
  isInBacklog     Boolean
  sprint          Sprint?      @relation(fields: [sprintId], references: [id])
  sprintId        Int?
  projectId       String
  estimatedPoints Int
  status          Int
  priority        Int
  itemType        Int
  comments        Comment[]
  attachments     Attachment[]
}

model Attachment {
  id                  Int      @id @default(sequence())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  attachmentLink      String
  attachmentPublicId  String
  attachmentExtension String
  task                Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId              Int
}

model Comment {
  id              Int      @id @default(sequence())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdUserId   String
  createdUserName String
  createdUserPic  String?
  comment         String
  task            Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          Int?
}

model UsersOnProjects {
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int // relation scalar field (used in the `@relation` attribute above)
  user      User    @relation(fields: [userId], references: [id])
  userId    Int // relation scalar field (used in the `@relation` attribute above)

  @@id([projectId, userId])
}
